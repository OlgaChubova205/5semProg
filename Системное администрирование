Git Bash - дэмоэкзамен
OC Linux: дистрибутив Иностранные Ubunta Debian Русские BaseAlt и АстраЛинукс
База данных Postgre из консоли
Брокеры сообщений
Докеры
Система управления версиями (от англ. Version Control System, VCS) — программное обеспечение для облегчения работы с изменяющейся информацией. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое.
Разновидности архитектур VCS
3.1. Локальная система контроля версийЛокальные VCS хранятся у вас на компьютере. Пример локальной VCS - RCS - одна из первых систем контроля версий, разработанная в 1985 году.

Составим список преимуществ и недостатков локальных VCS.

Преимущества:
1. Позволяет хранить историю изменения файлов локально, без интернета.
2. Вы независимы от сторонних серверов.

Недостатки:
1. Вы можете потерять все файлы, если с вашем компьютером что-то случится.
2. Вы не можете работать в команде, поскольку репозиторий доступен только вам.

3.2. Централизованная система контроля версий
Централизованная VCS хранит все данные на сервере, а сотрудники получают к ним доступ.

Примерами удаленных систем контроля версий являются CVS, Subversion и Perforce.

Преимущества централизованных VCS:
1. Вы можете работать в команде с другими разработчиками.
2. Ваше начальство видит, чем вы занимаетесь.
3. У администратора есть четкий контроль, кто и что может делать. Администрировать центральную VCS намного проще, чем локальные на каждой машине.

Недостатки централизованных VCS:
1. Все данные хранятся только на одном сервере. Если он выключится, то работу всей компании парализует.
2. Если с сервером что-то случится, а копий данных нет, то весь проект может быть потерян.
3. Для работы необходим хороший интернет на протяжении целого дня.

3.3. Распределенная система контроля версий
Распределенные VCS - лидер по популярности на сегодняшний день. Примеры таких систем - это Git, Mercurial и Bazaar.

Преимущества распределенных VCS:
1. Работа компании теперь не зависит от работы сервера. Если сервер отключится, то каждый сотрудник продолжит работу с локальной копией репозитория, а после загрузит ее на сервер.
2. Можно работать с несколькими удаленными репозиториями, делиться кодом с другими людьми и коллаборировать целыми компаниями.
ОБЩИЙ ИТОГ

Для закрепления повторим все, что было сказано ранее. Итак, VCS открывает перед вами следующие возможности:

1. Сохранять все изменения в файлах в хронологическом порядке, при этом не путаясь в именах миллионов копий одного и того же файла.
2. Избегать неприятных ошибок в коде, вызванных непредвиденным поведением новых функций.
3. Отслеживать, над какими файлами вы работаете (и работаете ли вообще). Вам это вряд ли пригодится, а вот вашему начальству – очень.
4. Работать параллельно над одним и тем же проектом вместе с командой, не боясь конфликтов, например, одновременного изменения одного и того же файла.
5. Делиться своим кодом. А разработчики со всего мира могут улучшать его и записывать изменения на ваш сервер.

Как появился Git?

Git был разработан командой Линуса Торвальдса в 2005 году, как open-source аналог уже существующим системам. Но разработка Git не была спонтанным решением. Дело в том, что с самого первого релиза в 1991 году разработка ядра Linux выполнялась по старинке: старая версия архивировалась, а новые патчи от разработчиков становились новой версией.

Но с ростом популярности рос и объем данных, поэтому в 2002 году было принято решение перевести ядро Linux на распределенную систему управления версиями BitKeeper от BitMover Inc. Однако между компаниями произошел разлад и BitMover Inc. отозвали лицензию на бесплатное использование своего ПО.
Основные требования к новой системе были следующими:
Скорость
Простота дизайна
Поддержка нелинейной разработки (тысячи параллельных веток)
Полная распределенность
Возможность эффективной работы с такими большими проектами, как ядро Linux (как по скорости, так и по размеру данных)


















